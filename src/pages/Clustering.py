"""
Cette page pr√©sente le Clustering appliqu√© aux donn√©es des recettes.
"""

import os
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import logging
import streamlit.components.v1 as components
import html
from utils.load_functions import load_data, load_css

logger = logging.getLogger(os.path.basename(__file__))

# Param√©trage de Streamlit
st.set_page_config(
    page_title="MangeTaData", page_icon="images/favicon_mangetadata.png", layout="wide"
)


def main():

    PATH_DATA = "data/bertopic_chart/"
    TOPICS_CSV = "topics_model.csv"

    # Charger le CSS
    load_css("style.css")

    # Titre et description de la page
    st.title("üë®‚Äçüç≥ Clustering des recettes pour analyser les types de cuisine")
    st.write(
        """
    Cette page pr√©sente le Clustering appliqu√© aux donn√©es de recettes,
    afin d'identifier les diff√©rents types de cuisine.
    """
    )

    st.header("1Ô∏è‚É£ Chargement des donn√©es")

    st.write(
        """
        √Ä la suite du pr√©traitement o√π les donn√©es ont √©t√© nettoy√©es, tokenis√©es et o√π les stopwords ont √©t√© supprim√©s,
        nous pouvons charger les diff√©rentes descriptions et noms des recettes pour les analyser.
        Pour cela, nous r√©cup√©rons les donn√©es du fichier CSV et les transformons en liste de cha√Ænes de caract√®res.
        Apr√®s une analyse et des tests de clustering sur les descriptions, nous pr√©f√©rons finalement utiliser BERTopic 
        sur la colonne *name*, plus repr√©sentative des recettes.
        """
    )

    st.header("2Ô∏è‚É£ R√©alisation du Clustering avec BERTopic")

    st.write(
        """
        Nous utilisons la librairie BERTopic pour r√©aliser le Clustering des recettes.
        √Ä l'aide de BERT, un embedding est r√©alis√© pour chaque description de recette.
        Ensuite, nous effectuons le Clustering afin d'identifier les diff√©rents types de cuisine.
        Pour cela, BERTopic utilise HDBSCAN. Nous param√©trons ce dernier pour produire des clusters de taille minimale 100.
        De plus, BERTopic utilise UMAP pour la r√©duction de dimension.
        Nous r√©duisons ensuite les ~300 topics obtenus √† 150 en regroupant les topics les plus proches en dimensions r√©duites (5).
        """
    )

    st.write(
        """
        Afin d'obtenir les meilleurs r√©sultats possibles et apr√®s plusieurs essais,
        nous avons d√©cid√© de fournir √† BERTopic des 'topic_seeds' avec des mots-cl√©s g√©n√©r√©s par ChatGPT.
        Ces mots-cl√©s repr√©sentent des types de plats ou de cuisines, ce qui permet √† BERTopic de mieux identifier les clusters.
        """
    )

    topics_csv = load_data(PATH_DATA, TOPICS_CSV)

    # Afficher les donn√©es brutes si elles existent
    if not topics_csv.empty:
        st.write("Exemple des Topics obtenus :")
        st.dataframe(topics_csv.head(10))
    else:
        st.warning("Fichier topics_model.csv introuvable.")
        logger.warning("topics_model.csv introuvable.")

    st.header("3Ô∏è‚É£ Analyse des topics")

    st.write(
        """
        Une visualisation des topics obtenus est disponible ci-dessous.
        Cette repr√©sentation 2D permet de visualiser les clusters.
        On remarque que des groupes distincts se forment :
        
        - Dans le coin bas droit, on retrouve les recettes sucr√©es.
        - Au centre, on retrouve les fruits, les agrumes, certaines √©pices et sirops.
        - Les recettes sal√©es se retrouvent √† l'oppos√©, dans le coin haut gauche.
        - On observe des recettes de viandes, de poissons, de l√©gumes, d'√©pices et de nombreux types de sauces.
        - Les recettes de types tartes, quiches, pizzas se regroupent dans le m√™me secteur.
        - De m√™me pour les recettes √† base de l√©gumes, qui se retrouvent dans le coin bas gauche.
        """
    )

    st.write(
        """
             Les topics les plus fr√©quents sont des topcis situ√© dans les quatres coins de la visualisation. Les recettes populaires peuvent etre sucr√©es ou sal√©es, des sauces ou des gateaux...
             """
    )

    with open(
        "data/bertopic_chart/visualization_topics.html", "r", encoding="utf-8"
    ) as f:
        html_string = f.read()

    escaped_html = html.escape(html_string)

    iframe_code = f"""
        <iframe srcdoc="{escaped_html}" width="700" height="700" style="border: 2px solid #55381f; border-radius: 20px; background-color: #ffffff;"></iframe>
    """

    st.components.v1.html(iframe_code, height=715, width=715)

    st.header("4Ô∏è‚É£ Visualisation sous forme d'arbres hi√©rarchiques")

    st.write(
        """
        Voici la visualisation des clusters obtenus avec BERTopic.
        Le pan (outil en haut √† droite) permet de se d√©placer dans la visualisation.
        """
    )

    with open("data/bertopic_chart/visualization.html", "r", encoding="utf-8") as f:
        html_string = f.read()

    escaped_html = html.escape(html_string)

    iframe_code = f"""
        <iframe srcdoc="{escaped_html}" width="1000" height="800" style="border: 2px solid #55381f; border-radius: 20px; background-color: #ffffff;"></iframe>
    """

    st.components.v1.html(iframe_code, height=820)


if __name__ == "__main__":
    main()
