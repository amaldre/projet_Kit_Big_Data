import os
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import logging

logger = logging.getLogger(os.path.basename(__file__))

# Param√©trage de Streamlit
st.set_page_config(page_title="Explication Pr√©traitement", layout="wide")

def load_css(file_name):
    try:
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
        logger.info(f"Le fichier CSS {file_name} a √©t√© charg√© avec succ√®s.")
    except Exception as e:
        logger.error(f"Erreur lors du chargement du fichier CSS {file_name}: {e}")
        st.error(f"Une erreur est survenue lors du chargement du fichier CSS. Veuillez v√©rifier le fichier.")

# Charger le CSS
load_css("style.css")

# Titre et description de la page
st.title("üë®‚Äçüç≥ Clustering des recettes pour analyser les types de cuisine")
st.write(
    """
Cette page pr√©sente le Clustering appliqu√© aux donn√©es de recettes,
afin d'identifier les diff√©rents types de cuisine.
"""
)

st.header("1Ô∏è‚É£ Chargement des donn√©es")

st.write(
    """
         A la suite du pr√© traitement ou les donn√©es ont √©t√© n√©toy√©es, tokenis√©es et ou les stop words ont √©t√© supprim√©s,
         nous pouvons charger les diff√©rentes descriptions des recettes pour les analyser.
         Pour cela nous r√©cup√©rons les donn√©es du fichier csv et nous les transformons en Liste de String.
    """
)

st.header("2Ô∏è‚É£ R√©alisation du Clustering avec BERTopic")

st.write(
    """
        Nous utilisons la librairie BERTopic pour r√©aliser le Clustering des recettes.
        A l'aide de BERT, un embeding est r√©alis√© pour chaque description de recette.
        Ensuite, nous r√©alisons le Clustering pour identifier les diff√©rents types de cuisine.
        Pour cela, BERTopic utilise HDBSCAN. Nous param√®trons ce dernier pour faire des clusters de taille minimum 100. 
        De plus, BERTopic utilise UMAP pour la r√©duction de dimension.
    """
)

st.write(
    """
        Afin d'obtenir les meilleurs r√©sultats possibles et apr√®s plusieurs essais,
        nous avons d√©cid√© de fournir √† BERTopic une 'topic_seeds' avec des mots cl√©s g√©n√©r√©s par chatGPT. 
    """
)

def create_scrolling_banner(texte: str):
    try:
        scrolling_banner = (
            """
        <style>
        .scrolling-banner {
            position: fixed;
            top: 0;
            width: 100%;
            background-color: #f0f2f6; /* Couleur de fond du bandeau */
            overflow: hidden;
            height: 50px; /* Hauteur du bandeau */
            z-index: 9999; /* Assure que le bandeau reste au-dessus des autres √©l√©ments */
        }

        .scrolling-banner h1 {
            position: absolute;
            width: 100%;
            height: 50px;
            line-height: 50px;
            margin: 0;
            font-size: 24px;
            color: #4CAF50; /* Couleur du texte */
            text-align: center;
            transform: translateX(100%);
            animation: scroll-left 10s linear infinite;
        }

        /* Animation pour le d√©filement du texte */
        @keyframes scroll-left {
            from {
                transform: translateX(100%);
            }
            to {
                transform: translateX(-100%);
            }
        }
        </style>

        <div class="scrolling-banner">
            <h1>"""
            + texte
            + """</h1>
        </div>
        """
        )
        logger.info("Banni√®re d√©filante cr√©√©e avec succ√®s.")
        return scrolling_banner
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation de la banni√®re d√©filante: {e}")
        st.error("Une erreur est survenue lors de la cr√©ation de la banni√®re d√©filante.")

# Affichage de la banni√®re d√©filante
scrolling_banner = create_scrolling_banner("Texte √† faire d√©filer")
st.components.v1.html(scrolling_banner, height=60)

