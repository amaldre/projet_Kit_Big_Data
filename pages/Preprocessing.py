"""
Page expliquant les √©tapes de pr√©traitement des donn√©es.
"""

import streamlit as st
import pandas as pd
import os
import logging
from src.utils.load_functions import load_data, load_css
import html

logger = logging.getLogger(os.path.basename(__file__))

# Variables globales pour simuler les donn√©es
PATH_DATA = "data/"
RAW_RECIPE = "RAW_recipes_sample.csv"
RAW_INTERACTIONS = "RAW_interactions_sample.csv"
DF_FINAL = "clean_cloud_df.csv"

try:
    st.set_page_config(
        page_title="MangeTaData",
        page_icon="images/favicon_mangetadata.png",
        layout="wide",
    )
except Exception as e:
    logger.error(f"Erreur lors de la configuration de la page : {e}")
    st.error("Une erreur s'est produite lors de la configuration de la page.")

load_css("src/style.css")


def main():
    st.title("üåü Explication du Pr√©traitement des Donn√©es")
    st.write(
        """
    Cette page pr√©sente les √©tapes de pr√©traitement appliqu√©es aux donn√©es, 
    ainsi que des visualisations pour mieux comprendre leur impact.
    """
    )
    st.header("Chargement des Donn√©es")
    st.write(
        """
    Les donn√©es brutes sont charg√©es √† partir de fichiers CSV. Voici un aper√ßu des fichiers utilis√©s :
    - `RAW_recipes.csv` : Donn√©es des recettes brutes.
    - `RAW_interactions.csv` : Interactions des utilisateurs avec les recettes.
    """
    )

    raw_recipes = load_data(PATH_DATA, RAW_RECIPE)
    raw_interactions = load_data(PATH_DATA, RAW_INTERACTIONS)

    # Afficher les donn√©es brutes
    if not raw_recipes.empty:
        st.write("Exemple de donn√©es brutes de RAW_recipes :")
        st.dataframe(raw_recipes.head(5))
    else:
        st.warning("Fichier RAW_recipes_sample.csv introuvable.")
        logger.warning("RAW_recipes_sample.csv introuvable.")

    if not raw_interactions.empty:
        st.write("Exemple de donn√©es brutes de RAW_interactions :")
        st.dataframe(raw_interactions.head(5))
    else:
        st.warning("Fichier RAW_interactions_sample.csv introuvable.")
        logger.warning("RAW_interactions_sample.csv introuvable.")

    with open("data/Food_data_drawio.html", "r", encoding="utf-8") as f:
        html_string = f.read()

    escaped_html = html.escape(html_string)

    st.write("Drawio de la base de donn√©es brutes, donn√©es de Kaggle :")
    iframe_code = f"""
        <iframe srcdoc="{escaped_html}" width="1000" height="800" style="border: 2px solid #55381f; border-radius: 20px; background-color: #ffffff;"></iframe>
    """

    st.components.v1.html(iframe_code, height=820)

    st.header("Transformation des Donn√©es")
    st.write(
        """
    Plusieurs transformations sont appliqu√©es pour pr√©parer les donn√©es :
    1. Les jeux de donn√©es doivent √™tre nettoy√©s.
       - Les recettes avec des valeurs manquantes sont supprim√©es.
       - Les recettes avec des valeurs aberrantes sont √©galement supprim√©es, notamment celles avec un temps de cuisson excessif ou un nombre d‚Äô√©tapes nul.
       - Les descriptions manquantes sont remplies avec le contenu de `name` pour combler les vides.
       
    2. Les donn√©es de `RAW_interactions` sont fusionn√©es avec `RAW_recipes`.
       - Les deux DataFrames sont fusionn√©s sur la colonne `recipe_id`.
       - Les colonnes d‚Äôinteractions sont transform√©es en listes pour faire correspondre chaque recette √† ses interactions, ses commentaires, ses reviews, etc.

    3. Fusion des jeux de donn√©es `RAW_recipes` et `RAW_interactions`.

    4. Nettoyage des descriptions et des noms.
       - Dans le but de r√©aliser un clustering, les descriptions et les noms des recettes sont nettoy√©s et tokenis√©s.
       - Les stopwords sont supprim√©s des textes.
    """
    )

    # Exemple visuel avant/apr√®s nettoyage
    if not raw_recipes.empty:
        try:
            raw_recipes["submitted"] = pd.to_datetime(
                raw_recipes.get("submitted", pd.Series([])), errors="coerce"
            )
            st.write(
                "**Avant conversion de la colonne `submitted` :**",
                raw_recipes["tags"].dtype,
            )
            st.write("**Apr√®s conversion :**", raw_recipes["tags"].dtype)
        except Exception as e:
            logger.error(
                f"Erreur lors de la conversion de la colonne `submitted` : {e}"
            )
            st.error(
                "Erreur lors de la conversion des colonnes. Veuillez v√©rifier vos donn√©es."
            )

    st.header("1Ô∏è‚É£ Nettoyage des Donn√©es")
    st.write(
        """
    Les colonnes contenant des valeurs manquantes sont remplac√©es ou supprim√©es :
    - La colonne `description` est remplie avec le contenu de `name` si elle est vide.
    - Les lignes avec `name` manquant sont supprim√©es.
        """
    )
    st.write("Nombre de recettes sans noms avant le pr√©traitement : *4980*")

    st.header("2Ô∏è‚É£ Pr√©paration √† la Fusion des Donn√©es")
    st.write(
        """
    Les donn√©es de `RAW_interactions` sont fusionn√©es avec `RAW_recipes` :
    - Les deux jeux de donn√©es sont joints sur la colonne `recipe_id`.
    - Les colonnes de `RAW_interactions` sont transform√©es en listes.
        """
    )

    st.header("3Ô∏è‚É£ Suppression des Valeurs Aberrantes")
    st.write(
        """
    Certaines recettes ¬´ troll ¬ª ou mal renseign√©es sont supprim√©es :
    - Les recettes avec un temps de cuisson excessif.
    - Les recettes avec un nombre d‚Äô√©tapes ou d‚Äôingr√©dients nul.
    - Apr√®s avoir s√©par√© la colonne `nutrition` et n‚Äôavoir gard√© que l‚Äôinformation sur les calories, les recettes avec un nombre de calories excessif sont supprim√©es.
    - Dans un souci de taille de la base de donn√©es, le vecteur des techniques de cuisson est retransform√© en mots.
        """
    )

    # Exemple fictif
    if not raw_recipes.empty:
        try:
            cleaned_recipes = raw_recipes[raw_recipes["minutes"] < 300]
            st.write(f"Recettes avant nettoyage : {len(raw_recipes)}")
            st.write(f"Recettes apr√®s nettoyage : {len(cleaned_recipes)}")
        except KeyError as e:
            logger.error(f"Erreur : Colonne manquante dans le DataFrame : {e}")
            st.error(
                "Certaines colonnes n√©cessaires pour le nettoyage des donn√©es sont manquantes."
            )
        except Exception as e:
            logger.error(f"Erreur lors de la suppression des valeurs aberrantes : {e}")
            st.error("Une erreur est survenue lors du nettoyage des donn√©es.")

    st.header("4Ô∏è‚É£ Nettoyage et Tokenisation des Textes")
    st.write(
        """
    Les descriptions et noms des recettes sont nettoy√©s et tokenis√©s :
    - Suppression des stopwords.
    - Tokenisation des phrases en mots.
        """
    )

    try:
        example_text = (
            "This is a recipe with a lot of unnecessary words and punctuation!!!"
        )
        stopwords = {"this", "is", "a", "and"}
        cleaned_text = " ".join(
            [word for word in example_text.lower().split() if word not in stopwords]
        )
        st.write(f"**Texte brut** : {example_text}")
        st.write(f"**Texte nettoy√©** : {cleaned_text}")
    except Exception as e:
        logger.error(f"Erreur lors du nettoyage des textes : {e}")
        st.error("Impossible de nettoyer les textes.")

    st.header("5Ô∏è‚É£ Mise en place d'une Base de Donn√©es")
    st.write(
        """
    Afin de d√©ployer notre application, une base de donn√©es MongoDB a √©t√© mise en place.
    Nous avons alors tent√© d'utiliser MongoDB Atlas.
    Pour cela, nous avons r√©duit le nombre de colonnes de notre base en supprimant les colonnes inutiles.
    Nous avons gard√© uniquement les colonnes suivantes car la version gratuite de MongoDB Atlas nous limitait √† 512 Mo :
        """
    )

    cols = st.columns(4)
    columns = [
        "recipe_id",
        "rating",
        "minutes",
        "ingredients",
        "techniques",
        "calories",
        "n_steps",
        "submitted",
    ]

    for i, col in enumerate(cols):
        with col:
            st.markdown(
                f"""
                <div style="padding:10px; border:1px solid #ddd; border-radius:8px; background-color:#ffffff; margin-bottom:10px;">
                    <strong>{columns[i]}</strong>
                </div>
                """,
                unsafe_allow_html=True,
            )
        if i + 4 < len(columns):
            with cols[i]:
                st.markdown(
                    f"""
                    <div style="padding:10px; border:1px solid #ddd; border-radius:8px; background-color:#ffffff; margin-bottom:10px;">
                        <strong>{columns[i + 4]}</strong>
                    </div>
                    """,
                    unsafe_allow_html=True,
                )

    st.write(
        """
    Des fonctions permettent d‚Äôajouter les colonnes correspondant aux moyennes des recettes et au nombre de commentaires.
    
    Apr√®s avoir cr√©√© notre collection et ins√©r√© nos donn√©es, nous avons pu nous connecter √† notre base via une classe Python d√©di√©e.
    Cependant, la version gratuite de MongoDB Atlas nous a limit√©s dans le t√©l√©chargement des donn√©es (10 Go sur une p√©riode glissante de 7 jours), 
    √©puisant rapidement notre quota lors des tests. Nous avons donc abandonn√© MongoDB Atlas au profit d‚Äôune base locale r√©duite √† 120 Mo.
    
    Les colonnes sont alors renomm√©es comme suit :
        """
    )

    cols = st.columns(5)
    columns = [
        "Nom",
        "Note moyenne",
        "Nombre de commentaires",
        "Date de publication de la recette",
        "Dur√©e de la recette (minutes)",
        "Ingr√©dients",
        "Calories",
        "Techniques utilis√©es",
        "Nombre d'√©tapes",
        "Dates des commentaires",
    ]

    for i, col in enumerate(cols):
        with col:
            st.markdown(
                f"""
                <div style="padding:10px; border:1px solid #ddd; border-radius:8px; background-color:#ffffff; margin-bottom:10px;">
                    <strong>{columns[i]}</strong>
                </div>
                """,
                unsafe_allow_html=True,
            )
        if i + 4 < len(columns):
            with cols[i]:
                st.markdown(
                    f"""
                    <div style="padding:10px; border:1px solid #ddd; border-radius:8px; background-color:#ffffff; margin-bottom:10px;">
                        <strong>{columns[i + 4]}</strong>
                    </div>
                    """,
                    unsafe_allow_html=True,
                )

    df_final = load_data(PATH_DATA, DF_FINAL)

    # afficher les donn√©es finales
    if not df_final.empty:
        st.write("Le DataFrame final est alors le suivant :")
        st.dataframe(df_final.head(5))
    else:
        st.warning("Fichier cloud_recipe_df.csv introuvable.")
        logger.warning("clean_cloud_df.csv introuvable.")


if __name__ == "__main__":
    main()